# SDWAN 技术与应用
# 网络基础篇
    1. 互联网体系架构
    2. IPv6 与 互联网认知黑洞
    3. IP 路由技术 -- 穿透网络迷雾
    4. TCP & BBR -- 如何应对不确定性

# 预备篇
    5. 数据中心网络 SDN
    6. TCP 加速与 CDN 陨坑



TCP/IP 体系架构

    体系结构就是看待世界的逻辑，即世界观；而不是协议的集合。
    TCP/IP 体系架构 -> 开放互联
    生于简单，死于优化。

    为什么 端到端 ?
        管理平面

    Everything over IP
        标签 背后 资源调度的媒介
        黄金，绸缎

    基础设施
        三段论
        逐渐沉淀，中立；不会出现暴利

    如何定义平台型公司?
        - (封闭 + 最优化)



IPv6
    低成本，而不是什么 IPv4 地址不够。

    IP ID -> 应用层 ID

    互联网演进定律：
        向后兼容
        成本低廉
        降维打击

    从以网络为中心向以服务为中心
    资源与服务充分池化并加速全球流动

    网络治理
        如何以低成本零冲突方式
        适应资源流动新常态

        5G VS. 小区宽带

        选择 IPv6，类似



IP Routing
    路由协议关键
        与谁交换信息
        交换什么信息
        如何交换信息


TCP
    从不确定性中寻找确定性

    基本功能：
        连接管理
            三次握手，四次挥手。(建立连接、拆除连接)

            什么是连接? 连接管理管什么?
                网络会话的系列状态(建立、拆除...)


            逐渐演变：
                累积确认 ack

                receiver 只告知 sender 已收到数据
                反复提醒

                sender 继续发? 等 or 不等
                    RTT(在路上 or 丢失)
                    sender无法甄别

                那就两个字，傻等


        超时与重传
            RTT
                字节流 颗粒度小 抖动剧烈 不精确

            测量?
                一系列艹蛋算法 复杂性

                RTT 是真的吗?
                    缓存(e.g. 瑞幸咖啡)
                    噪声

                统计分析?
                    隐含的前提、预期

                    测不准定律 比精确更重要的是明确的预期


        流量控制
            发送速率 滑动窗口(e.g. 弹夹)
                "一桶水泼下去"

        拥塞控制
            凡有丢包，必为拥塞。

            至少 "50%" 带宽利用率



BBR
    背景不同
    设计原则：
        控制自己行为，避免出现 RTT 一直增加，IO 吞吐量并没有增加。
        忽视丢包(20% 宕机)

        BDP = (max BW) * (min RTT)  时延带宽机
        BBR，统计 VS. TCP，计时




解析网络怪象--上帝视角看网络

    自研协议栈不按套路出牌的后果
        原生 socket，不按 RFC

    自作聪明的 OTT 厂商
        懂上层应用，不懂网络
        traceroute 原理(TTL = 1) & 非对称路径


    这就是国内的 IPv6
        不可达
            MTU TCPMSS
            IPv6 不分片


    SACK Panic
        1. 重新设置 TCPMSS
        2. 禁用

        TCP option
            SACK(选择性应答)
                (e.g. 接收到 1-2, 4-10; 回复 ack=2, 另附加 3-10 也收到)
                RFC-1323

            WindowScale
                Throughput(吞吐量) <= Windowsize / RTT
                滑动窗口


    这就是 TCP 优化(不是TCP 加速)
        CWND、SS、ssthresh、CA
            拥塞窗口
                控制 sender 的发送速率[已知，RTT时间、数量]

            慢启动阀值

            慢启动
                指数规律增长
                直至丢包，记录 cwnd 大小，即慢启动阀值

            拥塞避免
                线性规律增长
                发生超时

            假设：
                三次握手
                TCP + HTTP request
                Response(递增) + Ack

            数据发送量 = min(CWND, RWND)
                但管道不是你想塞就想塞

            提升 initCWND 2 -> 10

            建联优化
            首包优化

            ...效果显著


    超卖及识别对抗
        高复用率
        压测


    劫持、封禁
        逻辑
            PC -- Router -- Internet
               采集  \\  block
                    FW(分光、镜像) 分析

        原理(数据抢答干扰)
            client \    (雾)    / 可能此时 socket 已经 closed
                    \    /     /
                     \  /     /
            FW        \/     /
                       \    /
                        \  /
            Server       \/

SEQ 要对得上，否则认为 滑动窗口外 丢掉
client                   server
发送 SYN 报文
并置发送序号为 X
                         发送 SYN 报文
                         并置发送序号为 Y
                         确认号为 X + 1
发送 ACK 报文
并置发送序号为 X + 1
确认号为 Y + 1

SYN ACK  标志位 置位 '1'


    网络高性能、边缘计算
        DPDK
            基于用户态 实现的 0 拷贝 快速数据包处理 系统

